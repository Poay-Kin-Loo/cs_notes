=====================================================================
 Example 12 - O(2^n)
=====================================================================

  void allFib(int n) {
    for(int i=0; i<n; i++) {
      System.out.println(i + ": " + fib(i));
    }
  }
  
  int fib(int n) {
    if(n<=0) {
      return 0;
    } else if(n==1) {
      return 1;
    }
    return fib(n-1) + fib(n-2);
  }
  
fib is the same as in example 11 so we know it is O(2^n). So Let's have
a look what's happening to allFib depends on n:

  allFib(1) ->  fib(0)    => O(2^0)    
  
  allFib(2) ->  fib(0)    => O(2^0)
                fib(1)    => O(2^1)
                
  allFib(3) ->  fib(0)    => O(2^0)
                fib(1)    => O(2^1) 
                fib(2)    => O(2^2)
                
So in general for allFib we get:
  O(2^0 + 2^1 + ... + 2^n) -> O(2^(n+1)) = O(2^n)
